#!/usr/bin/env sh

# Universal color definitions using printf
COLOR_black=$(printf '\033[0;30m')
COLOR_red=$(printf '\033[0;31m')
COLOR_green=$(printf '\033[0;32m')
COLOR_yellow=$(printf '\033[0;33m')
COLOR_blue=$(printf '\033[0;34m')
COLOR_magenta=$(printf '\033[0;35m')
COLOR_cyan=$(printf '\033[0;36m')
COLOR_white=$(printf '\033[0;37m')
COLOR_bright_black=$(printf '\033[0;90m')
COLOR_bright_red=$(printf '\033[0;91m')
COLOR_bright_green=$(printf '\033[0;92m')
COLOR_bright_yellow=$(printf '\033[0;93m')
COLOR_bright_blue=$(printf '\033[0;94m')
COLOR_bright_magenta=$(printf '\033[0;95m')
COLOR_bright_cyan=$(printf '\033[0;96m')
COLOR_bright_white=$(printf '\033[0;97m')
COLOR_bold=$(printf '\033[1m')
COLOR_dim=$(printf '\033[2m')
COLOR_italic=$(printf '\033[3m')
COLOR_underline=$(printf '\033[4m')
COLOR_blink=$(printf '\033[5m')
COLOR_reverse=$(printf '\033[7m')
COLOR_hidden=$(printf '\033[8m')
COLOR_strikethrough=$(printf '\033[9m')
COLOR_reset=$(printf '\033[0m')

BG_COLOR_black=$(printf '\033[40m')
BG_COLOR_red=$(printf '\033[41m')
BG_COLOR_green=$(printf '\033[42m')
BG_COLOR_yellow=$(printf '\033[43m')
BG_COLOR_blue=$(printf '\033[44m')
BG_COLOR_magenta=$(printf '\033[45m')
BG_COLOR_cyan=$(printf '\033[46m')
BG_COLOR_white=$(printf '\033[47m')
BG_COLOR_bright_black=$(printf '\033[100m')
BG_COLOR_bright_red=$(printf '\033[101m')
BG_COLOR_bright_green=$(printf '\033[102m')
BG_COLOR_bright_yellow=$(printf '\033[103m')
BG_COLOR_bright_blue=$(printf '\033[104m')
BG_COLOR_bright_magenta=$(printf '\033[105m')
BG_COLOR_bright_cyan=$(printf '\033[106m')
BG_COLOR_bright_white=$(printf '\033[107m')

# Helper functions that work in all shells
get_color() {
  case "$1" in
    black) echo "$COLOR_black" ;;
    red) echo "$COLOR_red" ;;
    green) echo "$COLOR_green" ;;
    yellow) echo "$COLOR_yellow" ;;
    blue) echo "$COLOR_blue" ;;
    magenta) echo "$COLOR_magenta" ;;
    cyan) echo "$COLOR_cyan" ;;
    white) echo "$COLOR_white" ;;
    bright_black) echo "$COLOR_bright_black" ;;
    bright_red) echo "$COLOR_bright_red" ;;
    bright_green) echo "$COLOR_bright_green" ;;
    bright_yellow) echo "$COLOR_bright_yellow" ;;
    bright_blue) echo "$COLOR_bright_blue" ;;
    bright_magenta) echo "$COLOR_bright_magenta" ;;
    bright_cyan) echo "$COLOR_bright_cyan" ;;
    bright_white) echo "$COLOR_bright_white" ;;
    bold) echo "$COLOR_bold" ;;
    dim) echo "$COLOR_dim" ;;
    italic) echo "$COLOR_italic" ;;
    underline) echo "$COLOR_underline" ;;
    blink) echo "$COLOR_blink" ;;
    reverse) echo "$COLOR_reverse" ;;
    hidden) echo "$COLOR_hidden" ;;
    strikethrough) echo "$COLOR_strikethrough" ;;
    reset) echo "$COLOR_reset" ;;
    *) echo "" ;;
  esac
}

get_bg_color() {
  case "$1" in
    black) echo "$BG_COLOR_black" ;;
    red) echo "$BG_COLOR_red" ;;
    green) echo "$BG_COLOR_green" ;;
    yellow) echo "$BG_COLOR_yellow" ;;
    blue) echo "$BG_COLOR_blue" ;;
    magenta) echo "$BG_COLOR_magenta" ;;
    cyan) echo "$BG_COLOR_cyan" ;;
    white) echo "$BG_COLOR_white" ;;
    bright_black) echo "$BG_COLOR_bright_black" ;;
    bright_red) echo "$BG_COLOR_bright_red" ;;
    bright_green) echo "$BG_COLOR_bright_green" ;;
    bright_yellow) echo "$BG_COLOR_bright_yellow" ;;
    bright_blue) echo "$BG_COLOR_bright_blue" ;;
    bright_magenta) echo "$BG_COLOR_bright_magenta" ;;
    bright_cyan) echo "$BG_COLOR_bright_cyan" ;;
    bright_white) echo "$BG_COLOR_bright_white" ;;
    *) echo "" ;;
  esac
}

# Main colors function
colors() {
  local cmd="$1"
  [ $# -gt 0 ] && shift
  
  case "$cmd" in
    # Foreground colors
    black|red|green|yellow|blue|magenta|cyan|white)
      printf "%s%s%s" "$(get_color "$cmd")" "$*" "$(get_color reset)"
      ;;
    bright_*)
      printf "%s%s%s" "$(get_color "$cmd")" "$*" "$(get_color reset)"
      ;;
    # Background colors
    bg.*)
      local bg_color="${cmd#bg.}"
      printf "%s%s%s" "$(get_bg_color "$bg_color")" "$*" "$(get_color reset)"
      ;;
    # Text styles
    bold|dim|italic|underline|blink|reverse|hidden|strikethrough)
      printf "%s%s%s" "$(get_color "$cmd")" "$*" "$(get_color reset)"
      ;;
    # Special commands
    reset)
      printf "%s" "$(get_color reset)"
      ;;
    raw.*)
      local color="${cmd#raw.}"
      printf "%s" "$(get_color "$color")"
      ;;
    bg.raw.*)
      local bg_color="${cmd#bg.raw.}"
      printf "%s" "$(get_bg_color "$bg_color")"
      ;;
    list)
      echo "Available colors:"
      for color in black red green yellow blue magenta cyan white; do
        colors "$color" "  $color"
        echo
      done
      for color in bright_black bright_red bright_green bright_yellow bright_blue bright_magenta bright_cyan bright_white; do
        colors "$color" "  $color"
        echo
      done
      echo "Available styles:"
      for style in bold dim italic underline blink reverse hidden strikethrough; do
        colors "$style" "  $style"
        echo
      done
      echo "Background colors: use bg.<color> (e.g., bg.red)"
      echo "Raw codes: use raw.<color> or bg.raw.<color>"
      ;;
    help)
      echo "Usage: colors <color|style> <text>"
      echo "       colors raw.<color>  # outputs raw color code"
      echo "       colors bg.<color> <text>  # background color"
      echo "       colors list  # show all available colors"
      echo ""
      echo "Examples:"
      echo '  colors green "Success!"'
      echo '  colors bg.red "Error!"'
      echo '  colors bold "Important"'
      echo '  echo "$(colors raw.green)Green text$(colors reset)"'
      ;;
    *)
      [ -n "$cmd" ] && echo "Unknown color/style: $cmd" >&2
      [ -n "$cmd" ] && echo "Use 'colors help' for usage information" >&2
      [ -n "$cmd" ] && return 1
      ;;
  esac
}

# Export for backwards compatibility
export GREEN="$(get_color green)"
export RED="$(get_color red)"
export YELLOW="$(get_color yellow)"
export BLUE="$(get_color blue)"
export RESET="$(get_color reset)"

# If script is run directly, execute the colors function
case "$0" in
  *colors)
    colors "$@"
    ;;
esac